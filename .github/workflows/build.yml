name: build macOS, Linux, Windows

on: [push, pull_request]

jobs:
  build:
    timeout-minutes: 40

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - name: Cancel previous workflow runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check-out repository
        uses: actions/checkout@v2

      - name: Set up non-Python dependences (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -o Acquire::Retries=3 update
          sudo apt-get -o Acquire::Retries=3 install libxcb-xinerama0
          sudo apt-get -o Acquire::Retries=3 install libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xfixes0
          sudo apt-get -o Acquire::Retries=3 install libxcb-shape0
          sudo apt-get -o Acquire::Retries=3 install libpulse-mainloop-glib0
        # sudo apt-get install libgfortran4
        # echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
            python-version: 3.8

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - name: Declare env variables on push only
        if: github.event_name == 'push'
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Declare env variables on pull_request only
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$GITHUB_HEAD_REF" >> $GITHUB_ENV

      - name: Add extra info to pyproject.toml
        run: |
          python -m pip install toml
          python utils.py --update

      # https://docs.github.com/en/actions/reference/environment-variables
      - name: Declare env variables on push and pull_request
        shell: bash
        run: |
          echo "APP_NAME=$(python utils.py --get release.app_name)" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(python utils.py --get ci.app.info.release_tag)" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$(python utils.py --get ci.app.info.release_title)" >> $GITHUB_ENV
          echo "SCRIPTS_PATH=$(python utils.py --get ci.project.subdirs.scripts)" >> $GITHUB_ENV
          echo "DISTRIBUTION_PATH=$(python utils.py --get ci.project.subdirs.distribution)" >> $GITHUB_ENV
          echo "DOWNLOAD_PATH=$(python utils.py --get ci.project.subdirs.download)" >> $GITHUB_ENV
          echo "QTIFW_PATH=$(python utils.py --get ci.qtifw.setup.installation_path.${{ runner.os }})" >> $GITHUB_ENV
          echo "PYTHON_PACKAGES_PATH=$(python utils.py --get ci.cache.python_packages_path)" >> $GITHUB_ENV
          echo "GIT_INSTALL_URL=git+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY@${{ env.BRANCH_NAME }}" >> $GITHUB_ENV

      - name: Cache dependencies
        if: False  # disable caching
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ${{ env.DOWNLOAD_PATH }}
            ${{ env.QTIFW_PATH }}
            ${{ env.PYTHON_PACKAGES_PATH }}
          key: ${{ matrix.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Set up Python packages manager
        uses: Gr1N/setup-poetry@v7

      - name: Create venv and install Python dependences
        run: poetry install

      - name: Create freezed python app bundle
        run: poetry run python ${{ env.SCRIPTS_PATH }}/FreezeApp.py

      - name: Create offline and online app installers from freezed app bundle
        run: poetry run python ${{ env.SCRIPTS_PATH }}/MakeInstaller.py


      - name: Create zip archive of offline app installer for distribution
        run: >
          poetry run python ${{ env.SCRIPTS_PATH }}/ZipAppInstaller.py
          ${{ env.BRANCH_NAME }}

      - name: Upload zipped offline app installer to GitHub releases (non-master branch)
        if: github.event_name == 'push' && env.BRANCH_NAME != 'master'
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "${{ env.DISTRIBUTION_PATH }}/*.zip,${{ env.DISTRIBUTION_PATH }}/*.mp4"
          tag: ${{ env.BRANCH_NAME }}
          name: ${{ env.BRANCH_NAME }}
          bodyFile: "RELEASE.md"

