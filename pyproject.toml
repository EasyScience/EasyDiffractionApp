# POETRY CONFIG

[build-system]
requires = ['poetry>=1.0']
build-backend = 'poetry.masonry.api'

[tool.poetry]
name = 'easyDiffraction'
version = '0.0.4'
description = 'Making diffraction data analysis and modelling easy.'
license = 'GPL-3.0-only'
authors = ['Andrew Sazonov', 'Simon Ward']
readme = 'README.md'
homepage = 'https://github.com/tempscience'
repository = 'https://easyscience.apptimity.com/'
documentation = 'https://github.com/tempscience'
include = ['CHANGELOG.md']
packages = [ { include = 'easyDiffractionApp' } ]

[tool.poetry.dependencies]
python = '^3.7, <3.8'
#python = '^3.8, <3.9' # '^3.8' generates error when installing PySide2 in easyAppGui
#python = '3.7' # PyInstaller 3.6 doesn't support Python 3.8
matplotlib = '^3.2, <3.3'
matplotlib_backend_qtquick = { git = 'https://github.com/easyScience/matplotlib_backend_qtquick', rev = 'master' }
vtk = '^8.1'
pyobjc-core = { version = '^7.1', platform = 'darwin' }
pyobjc-framework-cocoa = { version = '^7.1', platform = 'darwin' }
# easyScience
easyCore = { git = 'https://github.com/easyScience/easyCore.git', rev = 'develop' }
easyDiffractionLib = { git = 'https://github.com/easyScience/easyDiffractionLib.git', rev = 'develop' }
easyAppLogic = { git = 'https://github.com/easyScience/easyAppLogic.git', rev = 'develop' }
easyAppGui = { git = 'https://github.com/easyScience/easyAppGui.git', rev = 'DAS-294' }
xarray = "^0.16.2"

[tool.poetry.dev-dependencies]
# PyInstaller
pyinstaller = '^4.1'
#pyinstaller = { git = 'https://github.com/pyinstaller/pyinstaller.git', rev = 'develop' }
macholib = '^1.14'
pywin32-ctypes = { version = '^0.2', platform = 'win32' }
pypiwin32 = { version = '^223', platform = 'win32' }
pefile = { version = '^2019.4', platform = 'win32' }
# Misc
toml = '^0.10'
requests = '^2.24'
dephell_licenses = '^0.1'
ffmpeg-python = '^0.2'
googletrans = '^3.0'
gTTS = '^2.2'
# easyScience
#easyCore = { path = '../easyCore/' }
#easyDiffractionLib = { path = '../easyDiffractionLib/' }
#easyAppLogic = { path = '../easyAppLogic/' }
#easyAppGui = { path = '../easyAppGui/' }

[tool.poetry.scripts]
easyDiffraction = 'easyDiffractionApp.main:main'

# CUSTOM CONFIG

[ci.project]
license_file = 'LICENSE.md' # how to combine this with tool.poetry.license???

[ci.project.subdirs]
scripts = 'tools/Scripts'
docs = { src = 'docs', dest = 'Documentation' }
tutorials = 'docs/UserManual/VideoTutorials'
download = '.ci/download'
screenshots = '.ci/screenshots'
build = '.ci/build'
distribution = '.ci/distribution'

[ci.scripts]
silent_install = 'SilentInstall.js'
package_install = 'InstallerInstallScript.js'
config_control = 'InstallerControlScript.js'
config_style = 'style.qss'

[ci.app.icon]
dir = ['Gui', 'Resources', 'Logo']
file_name = 'App'
file_ext = { macos = '.icns', ubuntu = '.png', windows = '.ico' }

[ci.app.setup]
build_dir_suffix = 'Setup'
repository_dir_suffix = 'Repos'
os = { macos = 'macOS', ubuntu = 'Linux', windows = 'Windows' }  # Should be the same as GH actions ${{ runner.os }}
arch = { macos = 'x86-64', ubuntu = 'x86-64', windows = 'x86-32' }
file_ext = { macos = '.app', ubuntu = '', windows = '.exe' }
maintenance_tool_suffix = 'MaintenanceTool'
installation_dir = { macos = '/Applications', ubuntu = '/opt', windows = 'ProgramFiles(x86)' }

[ci.app.setup.ftp]
host = 'ftp.apptimity.com'
port = 21
user = 'ed@easyscience.apptimity.com'
remote_subdir = 'app'

[ci.app.setup.build]
# config
config_dir = 'config'
config_xml = 'config.xml'
# packages
packages_dir = 'packages'
data_subsubdir = 'data'
meta_subsubdir = 'meta'
package_xml = 'package.xml'
# package: app
app_package_subdir = 'app'
# package: docs
#docs_package_subdir = 'docs'
#docs_package_subdir = 'docs'
#docs_package_name = 'Documentation'
#docs_package_description = 'Documentation: User manual, text and video tutorials'
#docs_package_version = '2020.7.11'

[ci.app.tutorials.video]
fps = 25                # Frames per Second
crf = 18                # Constant Rate Factor
preset = 'slower'
movflags = 'faststart'
pix_fmt = 'yuv420p'     # Pixel format

[ci.app.translations]
dir = 'Gui/Resources/Translations'
languages = [ { code = 'en', name = 'English' }, { code = 'fr', name = 'Française' }, { code = 'de', name = 'Deutsch' },
              { code = 'es', name = 'Español' }, { code = 'it', name = 'Italiano' },  { code = 'pt', name = 'Português' },
              { code = 'da', name = 'Dansk' },   { code = 'sv', name = 'Svenska' },   { code = 'pl', name = 'Polski' },
              { code = 'ru', name = 'Русский' } ]

[ci.app.audio]
dir = 'Gui/Resources/Audio'

[ci.poetry]
venv_path = { macOS = '/Users/runner/Library/Caches/pypoetry/virtualenvs', Linux = '/home/runner/.cache/pypoetry/virtualenvs', Windows = 'C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs' }

[ci.pyinstaller]
separator = { macos = ':', ubuntu = ':', windows = ';' }
dir_suffix = { macos = '.app', ubuntu = '', windows = '' }
content_suffix = { macos = 'Contents/MacOS/', ubuntu = '', windows = '' }
libs = { macos = 'libsDarwin', ubuntu = 'libsLinux', windows = 'libsWin32' }
missing_pyside2_files = { macos = ['libshiboken2.abi3.*.dylib'], ubuntu = [], windows = ['shiboken2.abi3.dll', 'MSVCP140.dll'] }
missing_pyside2_plugins = { macos = [], ubuntu = ['Qt/plugins/xcbglintegrations'], windows = [] } # EGL and GLX plugins
auto_exclude = { macos = ['_tkinter'], ubuntu = ['_tkinter'], windows = [''], all = [ 'lib2to3', '_bisect',
                '_codecs_cn', '_codecs_hk', '_codecs_iso2022', '_codecs_jp', '_codecs_kr', '_codecs_tw',
                '_curses', '_elementtree', '_hashlib', '_heapq', '_lzma', '_multibytecodec', '_multiprocessing',
                '_opcode', '_queue', '_opcode', '_uuid', '_win32sysloader', 'grp', 'readline', 'termios' ] }
manual_exclude = [ 'd3dcompiler*', 'libbispeu*', 'libdqag*', 'libvode*', 'mfc*', 'msvcp*', 'VCRUNTIME*',
                   '*Qt*3D*', '*Qt*Bluetooth*', '*Qt*Bodymovin*', '*Qt*Concurrent*', '*Qt*Gamepad*', '*Qt*Location*',
                   '*Qt*Nfc*', '*Qt*Positioning*', '*Qt*Purchasing*', '*Qt*QuickParticles*', '*Qt*QuickShapes*',
                   '*Qt*RemoteObjects*', '*Qt*Scxml*', '*Qt*Sensors*', '*Qt*Sql*', '*Qt*VirtualKeyboard*', '*Qt*Wayland*' ]

[ci.qtifw.setup]
version = '4.0.1'
https_mirrors = ['download.qt.io', 'ftp.fau.de/qtproject', 'mirrors.dotsrc.org/qtproject']
base_path = 'official_releases/qt-installer-framework'
file_name_base = 'QtInstallerFramework-'
file_name_suffix = { macos = 'mac-x64', ubuntu = 'linux-x64', windows = 'win-x86' }
file_ext = { macos = '.dmg', ubuntu = '.run', windows = '.exe' }
installation_path = { macos = '/Users/runner/Qt', ubuntu = '/home/runner/Qt', windows = 'C:\Qt' }

[ci.ffmpeg.macos]  # https://evermeet.cx/ffmpeg/ffmpeg-4.3.zip
version = '4.3.1'
base_url = 'https://evermeet.cx/ffmpeg'
file_name_base = 'ffmpeg-'
file_ext = '.zip'
exe = 'ffmpeg'
